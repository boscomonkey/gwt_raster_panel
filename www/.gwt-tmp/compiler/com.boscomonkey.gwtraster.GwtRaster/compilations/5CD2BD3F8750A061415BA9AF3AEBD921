var _;
function equals_0(other){
  return (this == null?null:this) === (other == null?null:other);
}

function hashCode_1(){
  return this.$H || (this.$H = ++sNextHashId);
}

function Object_0(){
}

_ = Object_0.prototype = {};
_.equals$ = equals_0;
_.hashCode$ = hashCode_1;
_.typeMarker$ = nullMethod;
_.typeId$ = 1;
function $GwtRaster$1(this$static, val$rasterPanel){
  this$static.val$rasterPanel = val$rasterPanel;
  return this$static;
}

function onClick(sender){
  $clear(this.val$rasterPanel);
}

function GwtRaster$1(){
}

_ = GwtRaster$1.prototype = new Object_0();
_.onClick = onClick;
_.typeId$ = 3;
_.val$rasterPanel = null;
function $GwtRaster$2(this$static, val$rasterPanel){
  this$static.val$rasterPanel = val$rasterPanel;
  return this$static;
}

function onClick_0(sender){
  var coord, coords, iter;
  coords = $getCoords(this.val$rasterPanel);
  for (iter = $AbstractList$IteratorImpl(new AbstractList$IteratorImpl(), coords); iter.i < iter.this$0.size_0();) {
    coord = dynamicCast($next_0(iter), 2);
    $wnd.alert('(' + coord.x + ', ' + coord.y + ')');
  }
}

function GwtRaster$2(){
}

_ = GwtRaster$2.prototype = new Object_0();
_.onClick = onClick_0;
_.typeId$ = 4;
_.val$rasterPanel = null;
function $setElement(this$static, elem){
  this$static.element = elem;
}

function $setPixelSize(this$static, width, height){
  if (width >= 0) {
    this$static.element.style['width'] = width + 'px';
  }
  if (height >= 0) {
    this$static.element.style['height'] = height + 'px';
  }
}

function setStyleName(elem, style, add){
  var begin, end, idx, last, lastPos, newClassName, oldStyle;
  if (!elem) {
    throw new RuntimeException();
  }
  style = $trim(style);
  if (style.length == 0) {
    throw new IllegalArgumentException();
  }
  oldStyle = elem['className'] == null?null:String(elem['className']);
  idx = oldStyle.indexOf(style);
  while (idx != -1) {
    if (idx == 0 || oldStyle.charCodeAt(idx - 1) == 32) {
      last = idx + style.length;
      lastPos = oldStyle.length;
      if (last == lastPos || last < lastPos && oldStyle.charCodeAt(last) == 32) {
        break;
      }
    }
    idx = oldStyle.indexOf(style, idx + 1);
  }
  if (add) {
    if (idx == -1) {
      if (oldStyle.length > 0) {
        oldStyle += ' ';
      }
      elem['className'] = oldStyle + style;
    }
  }
   else {
    if (idx != -1) {
      begin = $trim(oldStyle.substr(0, idx - 0));
      end = $trim($substring(oldStyle, idx + style.length));
      if (begin.length == 0) {
        newClassName = end;
      }
       else if (end.length == 0) {
        newClassName = begin;
      }
       else {
        newClassName = begin + ' ' + end;
      }
      elem['className'] = newClassName;
    }
  }
}

function UIObject(){
}

_ = UIObject.prototype = new Object_0();
_.typeId$ = 5;
_.element = null;
function $onAttach(this$static){
  if (this$static.isAttached()) {
    throw new IllegalStateException();
  }
  this$static.attached = true;
  this$static.element.__listener = this$static;
  this$static.doAttachChildren();
  this$static.onLoad();
}

function $onDetach(this$static){
  if (!this$static.isAttached()) {
    throw new IllegalStateException();
  }
  try {
    this$static.onUnload();
  }
   finally {
    this$static.doDetachChildren();
    this$static.element.__listener = null;
    this$static.attached = false;
  }
}

function $removeFromParent(this$static){
  if (instanceOf(this$static.parent, 11)) {
    dynamicCast(this$static.parent, 11).remove(this$static);
  }
   else if (this$static.parent) {
    throw new IllegalStateException();
  }
}

function $setParent(this$static, parent){
  var oldParent;
  oldParent = this$static.parent;
  if (!parent) {
    if (!!oldParent && oldParent.isAttached()) {
      this$static.onDetach();
    }
    this$static.parent = null;
  }
   else {
    if (oldParent) {
      throw new IllegalStateException();
    }
    this$static.parent = parent;
    if (parent.isAttached()) {
      this$static.onAttach();
    }
  }
}

function doAttachChildren_0(){
}

function doDetachChildren_0(){
}

function isAttached_0(){
  return this.attached;
}

function onAttach_0(){
  $onAttach(this);
}

function onBrowserEvent_2(event_0){
}

function onDetach_0(){
  $onDetach(this);
}

function onLoad_0(){
}

function onUnload_0(){
}

function Widget(){
}

_ = Widget.prototype = new UIObject();
_.doAttachChildren = doAttachChildren_0;
_.doDetachChildren = doDetachChildren_0;
_.isAttached = isAttached_0;
_.onAttach = onAttach_0;
_.onBrowserEvent = onBrowserEvent_2;
_.onDetach = onDetach_0;
_.onLoad = onLoad_0;
_.onUnload = onUnload_0;
_.typeId$ = 6;
_.attached = false;
_.parent = null;
function $initWidget(this$static, widget){
  if (this$static.widget) {
    throw new IllegalStateException();
  }
  $removeFromParent(widget);
  $setElement(this$static, widget.element);
  this$static.widget = widget;
  $setParent(widget, this$static);
}

function isAttached(){
  if (this.widget) {
    return this.widget.attached;
  }
  return false;
}

function onAttach(){
  $onAttach(this.widget);
  this.element.__listener = this;
}

function onBrowserEvent(event_0){
  this.widget.onBrowserEvent(event_0);
}

function onDetach(){
  $onDetach(this.widget);
}

function Composite(){
}

_ = Composite.prototype = new Widget();
_.isAttached = isAttached;
_.onAttach = onAttach;
_.onBrowserEvent = onBrowserEvent;
_.onDetach = onDetach;
_.typeId$ = 7;
_.widget = null;
function $RasterPanel_0(this$static, numX, numY, dimension, border){
  $RasterPanel(this$static, numX, numY, dimension, dimension, border);
  return this$static;
}

function $RasterPanel(this$static, numX, numY, pixW, pixY, border){
  var focus, x;
  this$static.mouseListener = $RasterPanel$1(new RasterPanel$1(), this$static);
  this$static.nPixelsX = numX;
  this$static.nPixelsY = numY;
  this$static.pixWidth = pixW;
  this$static.pixHeight = pixY;
  this$static.borderedDots = border;
  focus = $FocusPanel(new FocusPanel());
  $initWidget(this$static, focus);
  setStyleName(focus.element, 'cbg-RasterPanel', true);
  $addMouseListener(focus, this$static.mouseListener);
  this$static.width = this$static.nPixelsX * this$static.pixWidth;
  this$static.height = this$static.nPixelsY * this$static.pixHeight;
  $setPixelSize(focus, this$static.width, this$static.height);
  this$static.dotsPanel = $FlowPanel(new FlowPanel());
  $setWidget(focus, this$static.dotsPanel);
  setStyleName(this$static.dotsPanel.element, 'cbg-RasterPanel-panel', true);
  this$static.xyFlags = initDim(_3_3Z_classLit, 0, 13, this$static.nPixelsX, 0);
  for (x = 0; x < this$static.nPixelsX; ++x)
    this$static.xyFlags[x] = initDim(_3Z_classLit, 54, -1, this$static.nPixelsY, 2);
  return this$static;
}

function $clear(this$static){
  var i, n, pix, xy;
  for (i = 0 , n = this$static.dotsPanel.children.size; i < n; ++i) {
    pix = dynamicCast($get(this$static.dotsPanel.children, i), 3);
    setStyleName(pix.element, 'cbg-RasterPixel-engaged', false);
    xy = pix.coord;
    this$static.xyFlags[xy.x][xy.y] = false;
  }
  $clear_0(this$static.dotsPanel);
}

function $getCoords(this$static){
  var i, lst, n, p, w;
  lst = $ArrayList(new ArrayList());
  for (i = 0 , n = this$static.dotsPanel.children.size; i < n; ++i) {
    w = $get(this$static.dotsPanel.children, i);
    p = dynamicCast(w, 3);
    $add_3(lst, p.coord);
  }
  return lst;
}

function RasterPanel(){
}

_ = RasterPanel.prototype = new Composite();
_.typeId$ = 8;
_.bMouseDown = false;
_.borderedDots = false;
_.dotsPanel = null;
_.height = 0;
_.nPixelsX = 0;
_.nPixelsY = 0;
_.pixHeight = 0;
_.pixWidth = 0;
_.width = 0;
_.xyFlags = null;
function onMouseDown_0(sender, x, y){
}

function onMouseEnter(sender){
}

function onMouseLeave(sender){
}

function onMouseMove_0(sender, x, y){
}

function onMouseUp_0(sender, x, y){
}

function MouseListenerAdapter(){
}

_ = MouseListenerAdapter.prototype = new Object_0();
_.onMouseDown = onMouseDown_0;
_.onMouseEnter = onMouseEnter;
_.onMouseLeave = onMouseLeave;
_.onMouseMove = onMouseMove_0;
_.onMouseUp = onMouseUp_0;
_.typeId$ = 9;
function $RasterPanel$1(this$static, this$0){
  this$static.this$0 = this$0;
  return this$static;
}

function onMouseDown(sender, x, y){
  if (!this.this$0.bMouseDown) {
    setCapture(sender.element);
    this.this$0.bMouseDown = true;
  }
}

function onMouseMove(sender, x, y){
  var dot, i, j;
  if (this.this$0.bMouseDown && x >= 0 && y >= 0 && x < this.this$0.width && y < this.this$0.height) {
    i = ~~(x / this.this$0.pixWidth);
    j = ~~(y / this.this$0.pixHeight);
    if (!this.this$0.xyFlags[i][j]) {
      dot = $RasterPixel(new RasterPixel(), i, j, this.this$0.pixWidth, this.this$0.pixHeight, this.this$0.borderedDots);
      this.this$0.xyFlags[i][j] = true;
      $add_1(this.this$0.dotsPanel, dot);
      setStyleName(dot.element, 'cbg-RasterPixel-engaged', true);
    }
  }
}

function onMouseUp(sender, x, y){
  if (this.this$0.bMouseDown) {
    releaseCapture(sender.element);
    this.this$0.bMouseDown = false;
  }
}

function RasterPanel$1(){
}

_ = RasterPanel$1.prototype = new MouseListenerAdapter();
_.onMouseDown = onMouseDown;
_.onMouseMove = onMouseMove;
_.onMouseUp = onMouseUp;
_.typeId$ = 10;
_.this$0 = null;
function $RasterPixel(this$static, x, y, w, h, border){
  var dot, pixelX, pixelY;
  this$static.coord = $XyCoord(new XyCoord(), x, y);
  this$static.width = w;
  this$static.height = h;
  dot = $SimplePanel(new SimplePanel());
  $initWidget(this$static, dot);
  setStyleName(dot.element, 'cbg-RasterPixel', true);
  pixelX = '' + this$static.coord.x * this$static.width + 'px';
  pixelY = '' + this$static.coord.y * this$static.height + 'px';
  this$static.element.style['left'] = pixelX;
  this$static.element.style['top'] = pixelY;
  $setPixelSize(this$static, border?this$static.width - 1:this$static.width, border?this$static.height - 1:this$static.height);
  return this$static;
}

function RasterPixel(){
}

_ = RasterPixel.prototype = new Composite();
_.typeId$ = 11;
_.coord = null;
_.height = 0;
_.width = 0;
function $XyCoord(this$static, x, y){
  this$static.x = x;
  this$static.y = y;
  return this$static;
}

function XyCoord(){
}

_ = XyCoord.prototype = new Object_0();
_.typeId$ = 12;
_.x = 0;
_.y = 0;
function equals__devirtual$(this$static, other){
  return this$static.typeMarker$ == nullMethod || this$static.typeId$ == 2?this$static.equals$(other):(this$static == null?null:this$static) === (other == null?null:other);
}

function hashCode__devirtual$(this$static){
  return this$static.typeMarker$ == nullMethod || this$static.typeId$ == 2?this$static.hashCode$():this$static.$H || (this$static.$H = ++sNextHashId);
}

var sNextHashId = 0;
function $getParentElement(elem){
  var parent = elem.parentNode;
  if (parent == null) {
    return null;
  }
  if (parent.nodeType != 1)
    parent = null;
  return parent;
}

function $getAbsoluteLeft(elem){
  var left = 0;
  var curr = elem.parentNode;
  while (curr && curr.offsetParent) {
    if (curr.tagName != 'TR' && curr.tagName != 'TBODY') {
      left -= curr.scrollLeft;
    }
    curr = curr.parentNode;
  }
  while (elem) {
    left += elem.offsetLeft;
    elem = elem.offsetParent;
  }
  return left;
}

function $getAbsoluteTop(elem){
  var top = 0;
  var curr = elem.parentNode;
  while (curr && curr.offsetParent) {
    if (curr.tagName != 'TR' && curr.tagName != 'TBODY') {
      top -= curr.scrollTop;
    }
    curr = curr.parentNode;
  }
  while (elem) {
    top += elem.offsetTop;
    elem = elem.offsetParent;
  }
  return top;
}

function createFromSeed(seedType, length){
  var seedArray = [null, 0, false, [0, 0]];
  var value = seedArray[seedType];
  var array = new Array(length);
  for (var i = 0; i < length; ++i) {
    array[i] = value;
  }
  return array;
}

function initDim(arrayClass, typeId, queryId, length, seedType){
  var result;
  result = createFromSeed(seedType, length);
  initValues(arrayClass, typeId, queryId, result);
  return result;
}

function initValues(arrayClass, typeId, queryId, array){
  if (!protoTypeArray_0) {
    protoTypeArray_0 = new Array_0();
  }
  wrapArray(array, protoTypeArray_0);
  array.typeId$ = typeId;
  array.queryId$ = queryId;
  return array;
}

function setCheck(array, index, value){
  if (value != null) {
    if (array.queryId$ > 0 && !canCastUnsafe(value.typeId$, array.queryId$)) {
      throw new ArrayStoreException();
    }
    if (array.queryId$ < 0 && (value.typeMarker$ == nullMethod || value.typeId$ == 2)) {
      throw new ArrayStoreException();
    }
  }
  return array[index] = value;
}

function wrapArray(array, protoTypeArray){
  for (var i in protoTypeArray) {
    var toCopy = protoTypeArray[i];
    if (toCopy) {
      array[i] = toCopy;
    }
  }
  return array;
}

function Array_0(){
}

_ = Array_0.prototype = new Object_0();
_.typeId$ = 0;
_.length = 0;
_.queryId$ = 0;
var protoTypeArray_0 = null;
function canCast(srcId, dstId){
  return srcId && !!typeIdArray[srcId][dstId];
}

function canCastUnsafe(srcId, dstId){
  return srcId && typeIdArray[srcId][dstId];
}

function dynamicCast(src, dstId){
  if (src != null && !canCastUnsafe(src.typeId$, dstId)) {
    throw new ClassCastException();
  }
  return src;
}

function instanceOf(src, dstId){
  return src != null && canCast(src.typeId$, dstId);
}

var typeIdArray = [{}, {}, {1:1, 19:1, 20:1, 21:1}, {7:1}, {7:1}, {12:1}, {6:1, 9:1, 12:1}, {6:1, 9:1, 12:1}, {6:1, 9:1, 12:1}, {8:1}, {8:1}, {3:1, 6:1, 9:1, 12:1}, {2:1}, {4:1, 19:1}, {4:1, 19:1}, {4:1, 19:1}, {4:1, 19:1}, {6:1, 9:1, 11:1, 12:1}, {6:1, 9:1, 11:1, 12:1}, {6:1, 9:1, 11:1, 12:1}, {6:1, 9:1, 12:1}, {6:1, 9:1, 12:1}, {6:1, 9:1, 12:1}, {16:1}, {16:1, 19:1}, {16:1, 19:1}, {6:1, 9:1, 11:1, 12:1}, {6:1, 9:1, 11:1, 12:1}, {6:1, 9:1, 11:1, 12:1}, {16:1, 19:1}, {6:1, 9:1, 10:1, 11:1, 12:1}, {5:1}, {6:1, 9:1, 10:1, 11:1, 12:1}, {4:1, 19:1}, {4:1, 19:1}, {4:1, 19:1}, {4:1, 19:1}, {4:1, 19:1}, {4:1, 19:1}, {4:1, 19:1}, {4:1, 19:1}, {20:1}, {20:1}, {4:1, 19:1}, {18:1}, {18:1}, {15:1}, {15:1}, {15:1}, {18:1}, {17:1, 19:1}, {18:1, 19:1}, {15:1}, {4:1, 19:1}, {13:1}, {14:1}];
function dispatchEventImpl(evt, elem, listener){
  var prevCurrentEvent;
  if (elem == sCaptureElem) {
    if ($eventGetTypeInt(evt) == 8192) {
      sCaptureElem = null;
    }
  }
  prevCurrentEvent = currentEvent;
  currentEvent = evt;
  try {
    listener.onBrowserEvent(evt);
  }
   finally {
    currentEvent = prevCurrentEvent;
  }
}

function releaseCapture(elem){
  if (!!sCaptureElem && elem == sCaptureElem) {
    sCaptureElem = null;
  }
  $maybeInitializeEventSystem();
  $releaseCaptureImpl(elem);
}

function setCapture(elem){
  sCaptureElem = elem;
  $maybeInitializeEventSystem();
  captureElem = elem;
}

function sinkEvents(elem, eventBits){
  $maybeInitializeEventSystem();
  elem.__eventBits = eventBits;
  elem.onclick = eventBits & 1?dispatchEvent_0:null;
  elem.ondblclick = eventBits & 2?dispatchEvent_0:null;
  elem.onmousedown = eventBits & 4?dispatchEvent_0:null;
  elem.onmouseup = eventBits & 8?dispatchEvent_0:null;
  elem.onmouseover = eventBits & 16?dispatchEvent_0:null;
  elem.onmouseout = eventBits & 32?dispatchEvent_0:null;
  elem.onmousemove = eventBits & 64?dispatchEvent_0:null;
  elem.onkeydown = eventBits & 128?dispatchEvent_0:null;
  elem.onkeypress = eventBits & 256?dispatchEvent_0:null;
  elem.onkeyup = eventBits & 512?dispatchEvent_0:null;
  elem.onchange = eventBits & 1024?dispatchEvent_0:null;
  elem.onfocus = eventBits & 2048?dispatchEvent_0:null;
  elem.onblur = eventBits & 4096?dispatchEvent_0:null;
  elem.onlosecapture = eventBits & 8192?dispatchEvent_0:null;
  elem.onscroll = eventBits & 16384?dispatchEvent_0:null;
  elem.onload = eventBits & 32768?dispatchEvent_0:null;
  elem.onerror = eventBits & 65536?dispatchEvent_0:null;
  elem.onmousewheel = eventBits & 131072?dispatchEvent_0:null;
  elem.oncontextmenu = eventBits & 262144?dispatchEvent_0:null;
}

var currentEvent = null, sCaptureElem = null;
function addWindowCloseListener(listener){
  maybeInitializeHandlers();
  if (!closingListeners) {
    closingListeners = $ArrayList(new ArrayList());
  }
  $add_3(closingListeners, listener);
}

function fireClosedImpl(){
  var listener$iterator;
  if (closingListeners) {
    for (listener$iterator = $AbstractList$IteratorImpl(new AbstractList$IteratorImpl(), closingListeners); listener$iterator.i < listener$iterator.this$0.size_0();) {
      dynamicCast($next_0(listener$iterator), 5);
      detachWidgets();
    }
  }
}

function fireClosingImpl(){
  var listener$iterator, ret;
  ret = null;
  if (closingListeners) {
    for (listener$iterator = $AbstractList$IteratorImpl(new AbstractList$IteratorImpl(), closingListeners); listener$iterator.i < listener$iterator.this$0.size_0();) {
      dynamicCast($next_0(listener$iterator), 5);
      ret = null;
    }
  }
  return ret;
}

function init(){
  __gwt_initHandlers(function(){
  }
  , function(){
    return fireClosingImpl();
  }
  , function(){
    fireClosedImpl();
  }
  );
}

function maybeInitializeHandlers(){
  if (!handlersAreInitialized) {
    init();
    handlersAreInitialized = true;
  }
}

var closingListeners = null, handlersAreInitialized = false;
function $eventGetTypeInt(evt){
  switch (evt.type) {
    case 'blur':
      return 4096;
    case 'change':
      return 1024;
    case 'click':
      return 1;
    case 'dblclick':
      return 2;
    case 'focus':
      return 2048;
    case 'keydown':
      return 128;
    case 'keypress':
      return 256;
    case 'keyup':
      return 512;
    case 'load':
      return 32768;
    case 'losecapture':
      return 8192;
    case 'mousedown':
      return 4;
    case 'mousemove':
      return 64;
    case 'mouseout':
      return 32;
    case 'mouseover':
      return 16;
    case 'mouseup':
      return 8;
    case 'scroll':
      return 16384;
    case 'error':
      return 65536;
    case 'mousewheel':
      return 131072;
    case 'DOMMouseScroll':
      return 131072;
    case 'contextmenu':
      return 262144;
  }
}

function $maybeInitializeEventSystem(){
  if (!eventSystemIsInitialized) {
    $initEventSystem();
    eventSystemIsInitialized = true;
  }
}

function isMyListener(object){
  return object != null && canCast(object.typeId$, 6) && !(object != null && (object.typeMarker$ != nullMethod && object.typeId$ != 2));
}

var eventSystemIsInitialized = false;
function $eventGetFromElement(evt){
  if (evt.type == 'mouseover')
    return evt.relatedTarget;
  if (evt.type == 'mouseout')
    return evt.target;
  return null;
}

function $eventGetToElement(evt){
  if (evt.type == 'mouseover')
    return evt.target;
  if (evt.type == 'mouseout')
    return evt.relatedTarget;
  return null;
}

function $initEventSystem(){
  dispatchCapturedMouseEvent = function(evt){
    if (dispatchCapturedEvent(evt)) {
      var cap = captureElem;
      if (cap && cap.__listener) {
        if (isMyListener(cap.__listener)) {
          dispatchEventImpl(evt, cap, cap.__listener);
          evt.stopPropagation();
        }
      }
    }
  }
  ;
  dispatchCapturedEvent = function(evt){
    return true;
  }
  ;
  dispatchEvent_0 = function(evt){
    var listener, curElem = this;
    while (curElem && !(listener = curElem.__listener)) {
      curElem = curElem.parentNode;
    }
    if (curElem && curElem.nodeType != 1) {
      curElem = null;
    }
    if (listener) {
      if (isMyListener(listener)) {
        dispatchEventImpl(evt, curElem, listener);
      }
    }
  }
  ;
  $wnd.addEventListener('click', dispatchCapturedMouseEvent, true);
  $wnd.addEventListener('dblclick', dispatchCapturedMouseEvent, true);
  $wnd.addEventListener('mousedown', dispatchCapturedMouseEvent, true);
  $wnd.addEventListener('mouseup', dispatchCapturedMouseEvent, true);
  $wnd.addEventListener('mousemove', dispatchCapturedMouseEvent, true);
  $wnd.addEventListener('mouseover', dispatchCapturedMouseEvent, true);
  $wnd.addEventListener('mouseout', dispatchCapturedMouseEvent, true);
  $wnd.addEventListener('mousewheel', dispatchCapturedMouseEvent, true);
  $wnd.addEventListener('keydown', dispatchCapturedEvent, true);
  $wnd.addEventListener('keyup', dispatchCapturedEvent, true);
  $wnd.addEventListener('keypress', dispatchCapturedEvent, true);
}

function $releaseCaptureImpl(elem){
  if (elem === captureElem) {
    captureElem = null;
  }
}

var captureElem = null, dispatchCapturedEvent = null, dispatchCapturedMouseEvent = null, dispatchEvent_0 = null;
function $clinit_29(){
  $clinit_29 = nullMethod;
  documentRoot = $getDocumentRoot(($clinit_29() , new DocumentRootImpl()));
}

function $getDocumentRoot(){
  return $doc.compatMode == 'CSS1Compat'?$doc.documentElement:$doc.body;
}

function DocumentRootImpl(){
}

_ = DocumentRootImpl.prototype = new Object_0();
_.typeId$ = 0;
var documentRoot;
function $clear_0(this$static){
  var it;
  it = $WidgetCollection$WidgetIterator(new WidgetCollection$WidgetIterator(), this$static.children);
  while (it.index < it.this$0.size - 1) {
    $next(it);
    $remove_1(it);
  }
}

function doAttachChildren(){
  var child, it;
  for (it = this.iterator(); it.hasNext();) {
    child = dynamicCast(it.next(), 9);
    child.onAttach();
  }
}

function doDetachChildren(){
  var child, it;
  for (it = this.iterator(); it.hasNext();) {
    child = dynamicCast(it.next(), 9);
    child.onDetach();
  }
}

function onLoad(){
}

function onUnload(){
}

function Panel(){
}

_ = Panel.prototype = new Widget();
_.doAttachChildren = doAttachChildren;
_.doDetachChildren = doDetachChildren;
_.onLoad = onLoad;
_.onUnload = onUnload;
_.typeId$ = 17;
function $add_0(this$static, child, container){
  $removeFromParent(child);
  $add_2(this$static.children, child);
  container.appendChild(child.element);
  $setParent(child, this$static);
}

function $remove(this$static, w){
  var elem;
  if (w.parent != this$static) {
    return false;
  }
  $setParent(w, null);
  elem = w.element;
  $getParentElement(elem).removeChild(elem);
  $remove_3(this$static.children, w);
  return true;
}

function iterator(){
  return $WidgetCollection$WidgetIterator(new WidgetCollection$WidgetIterator(), this.children);
}

function remove_0(w){
  return $remove(this, w);
}

function ComplexPanel(){
}

_ = ComplexPanel.prototype = new Panel();
_.iterator = iterator;
_.remove = remove_0;
_.typeId$ = 18;
function $add(this$static, w){
  $add_0(this$static, w, this$static.element);
}

function changeToStaticPositioning(elem){
  elem.style['left'] = '';
  elem.style['top'] = '';
  elem.style['position'] = '';
}

function remove(w){
  var removed;
  removed = $remove(this, w);
  if (removed) {
    changeToStaticPositioning(w.element);
  }
  return removed;
}

function AbsolutePanel(){
}

_ = AbsolutePanel.prototype = new ComplexPanel();
_.remove = remove;
_.typeId$ = 19;
function $addClickListener(this$static, listener){
  if (!this$static.clickListeners) {
    this$static.clickListeners = $ClickListenerCollection(new ClickListenerCollection());
    sinkEvents(this$static.element, 1 | (this$static.element.__eventBits || 0));
  }
  $add_3(this$static.clickListeners, listener);
}

function onBrowserEvent_1(event_0){
  if ($eventGetTypeInt(event_0) == 1) {
    if (this.clickListeners) {
      $fireClick(this.clickListeners, this);
    }
  }
}

function FocusWidget(){
}

_ = FocusWidget.prototype = new Widget();
_.onBrowserEvent = onBrowserEvent_1;
_.typeId$ = 20;
_.clickListeners = null;
function $ButtonBase(this$static, elem){
  this$static.element = elem;
  this$static.element.tabIndex = 0;
  return this$static;
}

function ButtonBase(){
}

_ = ButtonBase.prototype = new FocusWidget();
_.typeId$ = 21;
function $Button_0(this$static, html){
  $ButtonBase(this$static, $doc.createElement('button'));
  adjustType(this$static.element);
  this$static.element['className'] = 'gwt-Button';
  this$static.element.innerHTML = html || '';
  return this$static;
}

function adjustType(button){
  if (button.type == 'submit') {
    try {
      button.setAttribute('type', 'button');
    }
     catch (e) {
    }
  }
}

function Button(){
}

_ = Button.prototype = new ButtonBase();
_.typeId$ = 22;
function $advanceToFind(iter, o){
  var t;
  while (iter.hasNext()) {
    t = iter.next();
    if (o == null?t == null:equals__devirtual$(o, t)) {
      return iter;
    }
  }
  return null;
}

function add_0(o){
  throw new UnsupportedOperationException();
}

function contains(o){
  var iter;
  iter = $advanceToFind(this.iterator(), o);
  return !!iter;
}

function AbstractCollection(){
}

_ = AbstractCollection.prototype = new Object_0();
_.add_0 = add_0;
_.contains_0 = contains;
_.typeId$ = 0;
function add_2(obj){
  this.add(this.size_0(), obj);
  return true;
}

function add_1(index, element){
  throw new UnsupportedOperationException();
}

function checkIndex(index, size){
  if (index < 0 || index >= size) {
    indexOutOfBounds(index, size);
  }
}

function equals_2(o){
  var elem, elemOther, iter, iterOther, other;
  if ((o == null?null:o) === (this == null?null:this)) {
    return true;
  }
  if (!(o != null && canCast(o.typeId$, 16))) {
    return false;
  }
  other = dynamicCast(o, 16);
  if (this.size_0() != other.size_0()) {
    return false;
  }
  iter = $AbstractList$IteratorImpl(new AbstractList$IteratorImpl(), this);
  iterOther = other.iterator();
  while (iter.i < iter.this$0.size_0()) {
    elem = $next_0(iter);
    elemOther = $next_0(iterOther);
    if (!(elem == null?elemOther == null:equals__devirtual$(elem, elemOther))) {
      return false;
    }
  }
  return true;
}

function hashCode_3(){
  var iter, k, obj;
  k = 1;
  iter = $AbstractList$IteratorImpl(new AbstractList$IteratorImpl(), this);
  while (iter.i < iter.this$0.size_0()) {
    obj = $next_0(iter);
    k = 31 * k + (obj == null?0:hashCode__devirtual$(obj));
    k = ~~k;
  }
  return k;
}

function indexOutOfBounds(index, size){
  throw $IndexOutOfBoundsException(new IndexOutOfBoundsException(), 'Index: ' + index + ', Size: ' + size);
}

function iterator_2(){
  return $AbstractList$IteratorImpl(new AbstractList$IteratorImpl(), this);
}

function AbstractList(){
}

_ = AbstractList.prototype = new AbstractCollection();
_.add_0 = add_2;
_.add = add_1;
_.equals$ = equals_2;
_.hashCode$ = hashCode_3;
_.iterator = iterator_2;
_.typeId$ = 23;
function $ArrayList(this$static){
  this$static.array = initDim(_3Ljava_lang_Object_2_classLit, 0, 0, 0, 0);
  this$static.size = 0;
  return this$static;
}

function $add_3(this$static, o){
  setCheck(this$static.array, this$static.size++, o);
  return true;
}

function $indexOf_2(this$static, o, index){
  for (; index < this$static.size; ++index) {
    if (equalsWithNullCheck(o, this$static.array[index])) {
      return index;
    }
  }
  return -1;
}

function add_4(o){
  return setCheck(this.array, this.size++, o) , true;
}

function add_3(index, o){
  if (index < 0 || index > this.size) {
    indexOutOfBounds(index, this.size);
  }
  this.array.splice(index, 0, o);
  ++this.size;
}

function contains_2(o){
  return $indexOf_2(this, o, 0) != -1;
}

function get_1(index){
  return checkIndex(index, this.size) , this.array[index];
}

function size_2(){
  return this.size;
}

function ArrayList(){
}

_ = ArrayList.prototype = new AbstractList();
_.add_0 = add_4;
_.add = add_3;
_.contains_0 = contains_2;
_.get = get_1;
_.size_0 = size_2;
_.typeId$ = 24;
_.array = null;
_.size = 0;
function $ClickListenerCollection(this$static){
  this$static.array = initDim(_3Ljava_lang_Object_2_classLit, 0, 0, 0, 0);
  this$static.size = 0;
  return this$static;
}

function $fireClick(this$static, sender){
  var listener, listener$iterator;
  for (listener$iterator = $AbstractList$IteratorImpl(new AbstractList$IteratorImpl(), this$static); listener$iterator.i < listener$iterator.this$0.size_0();) {
    listener = dynamicCast($next_0(listener$iterator), 7);
    listener.onClick(sender);
  }
}

function ClickListenerCollection(){
}

_ = ClickListenerCollection.prototype = new ArrayList();
_.typeId$ = 25;
function $FlowPanel(this$static){
  this$static.children = $WidgetCollection(new WidgetCollection(), this$static);
  this$static.element = $doc.createElement('div');
  return this$static;
}

function $add_1(this$static, w){
  $add_0(this$static, w, this$static.element);
}

function FlowPanel(){
}

_ = FlowPanel.prototype = new ComplexPanel();
_.typeId$ = 26;
function $SimplePanel(this$static){
  this$static.element = $doc.createElement('div');
  return this$static;
}

function $remove_0(this$static, w){
  if (this$static.widget != w) {
    return false;
  }
  $setParent(w, null);
  this$static.element.removeChild(w.element);
  this$static.widget = null;
  return true;
}

function $setWidget(this$static, w){
  if (w == this$static.widget) {
    return;
  }
  if (w) {
    $removeFromParent(w);
  }
  if (this$static.widget) {
    $remove_0(this$static, this$static.widget);
  }
  this$static.widget = w;
  if (w) {
    this$static.element.appendChild(this$static.widget.element);
    $setParent(w, this$static);
  }
}

function iterator_0(){
  return $SimplePanel$1(new SimplePanel$1(), this);
}

function remove_1(w){
  return $remove_0(this, w);
}

function SimplePanel(){
}

_ = SimplePanel.prototype = new Panel();
_.iterator = iterator_0;
_.remove = remove_1;
_.typeId$ = 27;
_.widget = null;
function $FocusPanel(this$static){
  var e;
  this$static.element = (e = $doc.createElement('DIV') , e.tabIndex = 0 , e);
  sinkEvents(this$static.element, 138237 | (this$static.element.__eventBits || 0));
  return this$static;
}

function $addMouseListener(this$static, listener){
  if (!this$static.mouseListeners) {
    this$static.mouseListeners = $MouseListenerCollection(new MouseListenerCollection());
  }
  $add_3(this$static.mouseListeners, listener);
}

function onBrowserEvent_0(event_0){
  switch ($eventGetTypeInt(event_0)) {
    case 4:
    case 8:
    case 64:
    case 16:
    case 32:
      if (this.mouseListeners) {
        $fireMouseEvent(this.mouseListeners, this, event_0);
      }

  }
}

function FocusPanel(){
}

_ = FocusPanel.prototype = new SimplePanel();
_.onBrowserEvent = onBrowserEvent_0;
_.typeId$ = 28;
_.mouseListeners = null;
function $MouseListenerCollection(this$static){
  this$static.array = initDim(_3Ljava_lang_Object_2_classLit, 0, 0, 0, 0);
  this$static.size = 0;
  return this$static;
}

function $fireMouseDown(this$static, sender, x, y){
  var listener, listener$iterator;
  for (listener$iterator = $AbstractList$IteratorImpl(new AbstractList$IteratorImpl(), this$static); listener$iterator.i < listener$iterator.this$0.size_0();) {
    listener = dynamicCast($next_0(listener$iterator), 8);
    listener.onMouseDown(sender, x, y);
  }
}

function $fireMouseEnter(this$static, sender){
  var listener, listener$iterator;
  for (listener$iterator = $AbstractList$IteratorImpl(new AbstractList$IteratorImpl(), this$static); listener$iterator.i < listener$iterator.this$0.size_0();) {
    listener = dynamicCast($next_0(listener$iterator), 8);
    listener.onMouseEnter(sender);
  }
}

function $fireMouseEvent(this$static, sender, event_0){
  var from, senderElem, to, x, y;
  senderElem = sender.element;
  x = (event_0.clientX || 0) - $getAbsoluteLeft(senderElem) + (parseInt(senderElem['scrollLeft']) || 0) + ($clinit_29() , documentRoot).scrollLeft;
  y = (event_0.clientY || 0) - $getAbsoluteTop(senderElem) + (parseInt(senderElem['scrollTop']) || 0) + documentRoot.scrollTop;
  switch ($eventGetTypeInt(event_0)) {
    case 4:
      $fireMouseDown(this$static, sender, x, y);
      break;
    case 8:
      $fireMouseUp(this$static, sender, x, y);
      break;
    case 64:
      $fireMouseMove(this$static, sender, x, y);
      break;
    case 16:
      from = $eventGetFromElement(event_0);
      if (!from || !senderElem.contains(from)) {
        $fireMouseEnter(this$static, sender);
      }

      break;
    case 32:
      to = $eventGetToElement(event_0);
      if (!to || !senderElem.contains(to)) {
        $fireMouseLeave(this$static, sender);
      }

  }
}

function $fireMouseLeave(this$static, sender){
  var listener, listener$iterator;
  for (listener$iterator = $AbstractList$IteratorImpl(new AbstractList$IteratorImpl(), this$static); listener$iterator.i < listener$iterator.this$0.size_0();) {
    listener = dynamicCast($next_0(listener$iterator), 8);
    listener.onMouseLeave(sender);
  }
}

function $fireMouseMove(this$static, sender, x, y){
  var listener, listener$iterator;
  for (listener$iterator = $AbstractList$IteratorImpl(new AbstractList$IteratorImpl(), this$static); listener$iterator.i < listener$iterator.this$0.size_0();) {
    listener = dynamicCast($next_0(listener$iterator), 8);
    listener.onMouseMove(sender, x, y);
  }
}

function $fireMouseUp(this$static, sender, x, y){
  var listener, listener$iterator;
  for (listener$iterator = $AbstractList$IteratorImpl(new AbstractList$IteratorImpl(), this$static); listener$iterator.i < listener$iterator.this$0.size_0();) {
    listener = dynamicCast($next_0(listener$iterator), 8);
    listener.onMouseUp(sender, x, y);
  }
}

function MouseListenerCollection(){
}

_ = MouseListenerCollection.prototype = new ArrayList();
_.typeId$ = 29;
function $clinit_53(){
  $clinit_53 = nullMethod;
  rootPanels = $HashMap(new HashMap());
  widgetsToDetach = $HashSet(new HashSet());
}

function $RootPanel(this$static, elem){
  $clinit_53();
  this$static.children = $WidgetCollection(new WidgetCollection(), this$static);
  this$static.element = elem;
  $onAttach(this$static);
  return this$static;
}

function detachWidgets(){
  var outerIter, entry;
  $clinit_53();
  var widget, widget$iterator;
  for (widget$iterator = (outerIter = $AbstractHashMap$EntrySetIterator(new AbstractHashMap$EntrySetIterator(), $keySet(widgetsToDetach.map).val$entrySet.this$0) , $AbstractMap$1$1(new AbstractMap$1$1(), outerIter)); $hasNext(widget$iterator.val$outerIter.iter);) {
    widget = dynamicCast((entry = dynamicCast($next_0(widget$iterator.val$outerIter.iter), 15) , entry.getKey()), 9);
    if (widget.isAttached()) {
      widget.onDetach();
    }
  }
}

function get_0(id){
  $clinit_53();
  var elem, rp;
  rp = dynamicCast($get_0(rootPanels, id), 10);
  if (rp) {
    return rp;
  }
  elem = null;
  if (id != null) {
    if (!(elem = $doc.getElementById(id))) {
      return null;
    }
  }
  if (rootPanels.size == 0) {
    addWindowCloseListener(new RootPanel$1());
  }
  if (!elem) {
    rp = $RootPanel$DefaultRootPanel(new RootPanel$DefaultRootPanel());
  }
   else {
    rp = $RootPanel(new RootPanel(), elem);
  }
  $put(rootPanels, id, rp);
  $add_4(widgetsToDetach, rp);
  return rp;
}

function RootPanel(){
}

_ = RootPanel.prototype = new AbsolutePanel();
_.typeId$ = 30;
var rootPanels, widgetsToDetach;
function RootPanel$1(){
}

_ = RootPanel$1.prototype = new Object_0();
_.typeId$ = 31;
function $clinit_52(){
  $clinit_52 = nullMethod;
  $clinit_53();
}

function $RootPanel$DefaultRootPanel(this$static){
  $clinit_52();
  $RootPanel(this$static, $doc.body);
  return this$static;
}

function RootPanel$DefaultRootPanel(){
}

_ = RootPanel$DefaultRootPanel.prototype = new RootPanel();
_.typeId$ = 32;
function $SimplePanel$1(this$static, this$0){
  this$static.this$0 = this$0;
  this$static.hasElement = !!this$static.this$0.widget;
  return this$static;
}

function hasNext(){
  return this.hasElement;
}

function next_0(){
  if (!this.hasElement || !this.this$0.widget) {
    throw new NoSuchElementException();
  }
  this.hasElement = false;
  return this.this$0.widget;
}

function SimplePanel$1(){
}

_ = SimplePanel$1.prototype = new Object_0();
_.hasNext = hasNext;
_.next = next_0;
_.typeId$ = 0;
_.this$0 = null;
function $WidgetCollection(this$static, parent){
  this$static.parent = parent;
  this$static.array = initDim(_3Lcom_google_gwt_user_client_ui_Widget_2_classLit, 0, 9, 4, 0);
  return this$static;
}

function $add_2(this$static, w){
  $insert(this$static, w, this$static.size);
}

function $get(this$static, index){
  if (index < 0 || index >= this$static.size) {
    throw new IndexOutOfBoundsException();
  }
  return this$static.array[index];
}

function $indexOf(this$static, w){
  var i;
  for (i = 0; i < this$static.size; ++i) {
    if (this$static.array[i] == w) {
      return i;
    }
  }
  return -1;
}

function $insert(this$static, w, beforeIndex){
  var i, newArray;
  if (beforeIndex < 0 || beforeIndex > this$static.size) {
    throw new IndexOutOfBoundsException();
  }
  if (this$static.size == this$static.array.length) {
    newArray = initDim(_3Lcom_google_gwt_user_client_ui_Widget_2_classLit, 0, 9, this$static.array.length * 2, 0);
    for (i = 0; i < this$static.array.length; ++i) {
      setCheck(newArray, i, this$static.array[i]);
    }
    this$static.array = newArray;
  }
  ++this$static.size;
  for (i = this$static.size - 1; i > beforeIndex; --i) {
    setCheck(this$static.array, i, this$static.array[i - 1]);
  }
  setCheck(this$static.array, beforeIndex, w);
}

function $remove_2(this$static, index){
  var i;
  if (index < 0 || index >= this$static.size) {
    throw new IndexOutOfBoundsException();
  }
  --this$static.size;
  for (i = index; i < this$static.size; ++i) {
    setCheck(this$static.array, i, this$static.array[i + 1]);
  }
  setCheck(this$static.array, this$static.size, null);
}

function $remove_3(this$static, w){
  var index;
  index = $indexOf(this$static, w);
  if (index == -1) {
    throw new NoSuchElementException();
  }
  $remove_2(this$static, index);
}

function WidgetCollection(){
}

_ = WidgetCollection.prototype = new Object_0();
_.typeId$ = 0;
_.array = null;
_.parent = null;
_.size = 0;
function $WidgetCollection$WidgetIterator(this$static, this$0){
  this$static.this$0 = this$0;
  return this$static;
}

function $next(this$static){
  if (this$static.index >= this$static.this$0.size) {
    throw new NoSuchElementException();
  }
  return this$static.this$0.array[++this$static.index];
}

function $remove_1(this$static){
  if (this$static.index < 0 || this$static.index >= this$static.this$0.size) {
    throw new IllegalStateException();
  }
  this$static.this$0.parent.remove(this$static.this$0.array[this$static.index--]);
}

function hasNext_0(){
  return this.index < this.this$0.size - 1;
}

function next_1(){
  return $next(this);
}

function WidgetCollection$WidgetIterator(){
}

_ = WidgetCollection$WidgetIterator.prototype = new Object_0();
_.hasNext = hasNext_0;
_.next = next_1;
_.typeId$ = 0;
_.index = -1;
_.this$0 = null;
function Throwable(){
}

_ = Throwable.prototype = new Object_0();
_.typeId$ = 13;
function Exception(){
}

_ = Exception.prototype = new Throwable();
_.typeId$ = 14;
function RuntimeException(){
}

_ = RuntimeException.prototype = new Exception();
_.typeId$ = 15;
function ArrayStoreException(){
}

_ = ArrayStoreException.prototype = new RuntimeException();
_.typeId$ = 34;
function createForArray(packageName, className){
  var clazz;
  clazz = new Class();
  return clazz;
}

function Class(){
}

_ = Class.prototype = new Object_0();
_.typeId$ = 0;
function ClassCastException(){
}

_ = ClassCastException.prototype = new RuntimeException();
_.typeId$ = 37;
function IllegalArgumentException(){
}

_ = IllegalArgumentException.prototype = new RuntimeException();
_.typeId$ = 38;
function IllegalStateException(){
}

_ = IllegalStateException.prototype = new RuntimeException();
_.typeId$ = 39;
function $IndexOutOfBoundsException(this$static, message){
  return this$static;
}

function IndexOutOfBoundsException(){
}

_ = IndexOutOfBoundsException.prototype = new RuntimeException();
_.typeId$ = 40;
function $substring(this$static, beginIndex){
  return this$static.substr(beginIndex, this$static.length - beginIndex);
}

function $trim(this$static){
  if (this$static.length == 0 || this$static[0] > ' ' && this$static[this$static.length - 1] > ' ') {
    return this$static;
  }
  var r1 = this$static.replace(/^(\s*)/, '');
  var r2 = r1.replace(/\s*$/, '');
  return r2;
}

function equals_1(other){
  if (!(other != null && canCast(other.typeId$, 1))) {
    return false;
  }
  return String(this) == other;
}

function hashCode_2(){
  return getHashCode_0(this);
}

_ = String.prototype;
_.equals$ = equals_1;
_.hashCode$ = hashCode_2;
_.typeId$ = 2;
function $clinit_80(){
  $clinit_80 = nullMethod;
  back = {};
  front = {};
}

function compute(str){
  var hashCode, i, inc, n;
  n = str.length;
  inc = n < 64?1:~~(n / 32);
  hashCode = 0;
  for (i = 0; i < n; i += inc) {
    hashCode <<= 1;
    hashCode += str.charCodeAt(i);
  }
  hashCode |= 0;
  return hashCode;
}

function getHashCode_0(str){
  $clinit_80();
  var key = ':' + str;
  var result = front[key];
  if (result != null) {
    return result;
  }
  result = back[key];
  if (result == null) {
    result = compute(str);
  }
  increment();
  return front[key] = result;
}

function increment(){
  if (count_0 == 256) {
    back = front;
    front = {};
    count_0 = 0;
  }
  ++count_0;
}

var back, count_0 = 0, front;
function UnsupportedOperationException(){
}

_ = UnsupportedOperationException.prototype = new RuntimeException();
_.typeId$ = 43;
function $keySet(this$static){
  var entrySet;
  entrySet = $AbstractHashMap$EntrySet(new AbstractHashMap$EntrySet(), this$static);
  return $AbstractMap$1(new AbstractMap$1(), this$static, entrySet);
}

function equals_4(obj){
  var entry, entry$iterator, otherKey, otherMap, otherValue;
  if ((obj == null?null:obj) === (this == null?null:this)) {
    return true;
  }
  if (!(obj != null && canCast(obj.typeId$, 17))) {
    return false;
  }
  otherMap = dynamicCast(obj, 17);
  if (dynamicCast(this, 17).size != otherMap.size) {
    return false;
  }
  for (entry$iterator = $AbstractHashMap$EntrySetIterator(new AbstractHashMap$EntrySetIterator(), $AbstractHashMap$EntrySet(new AbstractHashMap$EntrySet(), otherMap).this$0); $hasNext(entry$iterator.iter);) {
    entry = dynamicCast($next_0(entry$iterator.iter), 15);
    otherKey = entry.getKey();
    otherValue = entry.getValue();
    if (!(otherKey == null?dynamicCast(this, 17).nullSlotLive:otherKey != null && canCast(otherKey.typeId$, 1)?$hasStringValue(dynamicCast(this, 17), dynamicCast(otherKey, 1)):$hasHashValue(dynamicCast(this, 17), otherKey, ~~hashCode__devirtual$(otherKey)))) {
      return false;
    }
    if (!equalsWithNullCheck(otherValue, otherKey == null?dynamicCast(this, 17).nullSlot:otherKey != null && canCast(otherKey.typeId$, 1)?dynamicCast(this, 17).stringMap[':' + dynamicCast(otherKey, 1)]:$getHashValue(dynamicCast(this, 17), otherKey, ~~hashCode__devirtual$(otherKey)))) {
      return false;
    }
  }
  return true;
}

function hashCode_5(){
  var entry, entry$iterator, hashCode;
  hashCode = 0;
  for (entry$iterator = $AbstractHashMap$EntrySetIterator(new AbstractHashMap$EntrySetIterator(), $AbstractHashMap$EntrySet(new AbstractHashMap$EntrySet(), dynamicCast(this, 17)).this$0); $hasNext(entry$iterator.iter);) {
    entry = dynamicCast($next_0(entry$iterator.iter), 15);
    hashCode += entry.hashCode$();
    hashCode = ~~hashCode;
  }
  return hashCode;
}

function AbstractMap(){
}

_ = AbstractMap.prototype = new Object_0();
_.equals$ = equals_4;
_.hashCode$ = hashCode_5;
_.typeId$ = 0;
function $addAllHashEntries(this$static, dest){
  var hashCodeMap = this$static.hashCodeMap;
  for (var hashCode in hashCodeMap) {
    if (hashCode == parseInt(hashCode)) {
      var array = hashCodeMap[hashCode];
      for (var i = 0, c = array.length; i < c; ++i) {
        dest.add_0(array[i]);
      }
    }
  }
}

function $addAllStringEntries(this$static, dest){
  var stringMap = this$static.stringMap;
  for (var key in stringMap) {
    if (key.charCodeAt(0) == 58) {
      var entry = new_$(this$static, key.substring(1));
      dest.add_0(entry);
    }
  }
}

function $containsKey(this$static, key){
  return key == null?this$static.nullSlotLive:key != null && canCast(key.typeId$, 1)?$hasStringValue(this$static, dynamicCast(key, 1)):$hasHashValue(this$static, key, ~~hashCode__devirtual$(key));
}

function $get_0(this$static, key){
  return key == null?this$static.nullSlot:key != null && canCast(key.typeId$, 1)?this$static.stringMap[':' + dynamicCast(key, 1)]:$getHashValue(this$static, key, ~~hashCode__devirtual$(key));
}

function $getHashValue(this$static, key, hashCode){
  var array = this$static.hashCodeMap[hashCode];
  if (array) {
    for (var i = 0, c = array.length; i < c; ++i) {
      var entry = array[i];
      var entryKey = entry.getKey();
      if (this$static.equalsBridge(key, entryKey)) {
        return entry.getValue();
      }
    }
  }
  return null;
}

function $hasHashValue(this$static, key, hashCode){
  var array = this$static.hashCodeMap[hashCode];
  if (array) {
    for (var i = 0, c = array.length; i < c; ++i) {
      var entry = array[i];
      var entryKey = entry.getKey();
      if (this$static.equalsBridge(key, entryKey)) {
        return true;
      }
    }
  }
  return false;
}

function $hasStringValue(this$static, key){
  return ':' + key in this$static.stringMap;
}

function $put(this$static, key, value){
  return key == null?$putNullSlot(this$static, value):key != null && canCast(key.typeId$, 1)?$putStringValue(this$static, dynamicCast(key, 1), value):$putHashValue(this$static, key, value, ~~hashCode__devirtual$(key));
}

function $putHashValue(this$static, key, value, hashCode){
  var array = this$static.hashCodeMap[hashCode];
  if (array) {
    for (var i = 0, c = array.length; i < c; ++i) {
      var entry = array[i];
      var entryKey = entry.getKey();
      if (this$static.equalsBridge(key, entryKey)) {
        var previous = entry.getValue();
        entry.setValue(value);
        return previous;
      }
    }
  }
   else {
    array = this$static.hashCodeMap[hashCode] = [];
  }
  var entry = $MapEntryImpl(new MapEntryImpl(), key, value);
  array.push(entry);
  ++this$static.size;
  return null;
}

function $putNullSlot(this$static, value){
  var result;
  result = this$static.nullSlot;
  this$static.nullSlot = value;
  if (!this$static.nullSlotLive) {
    this$static.nullSlotLive = true;
    ++this$static.size;
  }
  return result;
}

function $putStringValue(this$static, key, value){
  var result, stringMap = this$static.stringMap;
  key = ':' + key;
  if (key in stringMap) {
    result = stringMap[key];
  }
   else {
    ++this$static.size;
  }
  stringMap[key] = value;
  return result;
}

function equalsBridge(value1, value2){
  return (value1 == null?null:value1) === (value2 == null?null:value2) || value1 != null && equals__devirtual$(value1, value2);
}

function AbstractHashMap(){
}

_ = AbstractHashMap.prototype = new AbstractMap();
_.equalsBridge = equalsBridge;
_.typeId$ = 0;
_.hashCodeMap = null;
_.nullSlot = null;
_.nullSlotLive = false;
_.size = 0;
_.stringMap = null;
function equals_5(o){
  var iter, other, otherItem;
  if ((o == null?null:o) === (this == null?null:this)) {
    return true;
  }
  if (!(o != null && canCast(o.typeId$, 18))) {
    return false;
  }
  other = dynamicCast(o, 18);
  if (other.size_0() != this.size_0()) {
    return false;
  }
  for (iter = other.iterator(); iter.hasNext();) {
    otherItem = iter.next();
    if (!this.contains_0(otherItem)) {
      return false;
    }
  }
  return true;
}

function hashCode_6(){
  var hashCode, iter, next;
  hashCode = 0;
  for (iter = this.iterator(); iter.hasNext();) {
    next = iter.next();
    if (next != null) {
      hashCode += hashCode__devirtual$(next);
      hashCode = ~~hashCode;
    }
  }
  return hashCode;
}

function AbstractSet(){
}

_ = AbstractSet.prototype = new AbstractCollection();
_.equals$ = equals_5;
_.hashCode$ = hashCode_6;
_.typeId$ = 44;
function $AbstractHashMap$EntrySet(this$static, this$0){
  this$static.this$0 = this$0;
  return this$static;
}

function contains_0(o){
  var entry, key, value;
  if (o != null && canCast(o.typeId$, 15)) {
    entry = dynamicCast(o, 15);
    key = entry.getKey();
    if ($containsKey(this.this$0, key)) {
      value = $get_0(this.this$0, key);
      return $equals_0(entry.getValue(), value);
    }
  }
  return false;
}

function iterator_1(){
  return $AbstractHashMap$EntrySetIterator(new AbstractHashMap$EntrySetIterator(), this.this$0);
}

function size_0(){
  return this.this$0.size;
}

function AbstractHashMap$EntrySet(){
}

_ = AbstractHashMap$EntrySet.prototype = new AbstractSet();
_.contains_0 = contains_0;
_.iterator = iterator_1;
_.size_0 = size_0;
_.typeId$ = 45;
_.this$0 = null;
function $AbstractHashMap$EntrySetIterator(this$static, this$0){
  var list;
  this$static.this$0 = this$0;
  list = $ArrayList(new ArrayList());
  if (this$static.this$0.nullSlotLive) {
    $add_3(list, $AbstractHashMap$MapEntryNull(new AbstractHashMap$MapEntryNull(), this$static.this$0));
  }
  $addAllStringEntries(this$static.this$0, list);
  $addAllHashEntries(this$static.this$0, list);
  this$static.iter = $AbstractList$IteratorImpl(new AbstractList$IteratorImpl(), list);
  return this$static;
}

function hasNext_1(){
  return $hasNext(this.iter);
}

function next_2(){
  return dynamicCast($next_0(this.iter), 15);
}

function AbstractHashMap$EntrySetIterator(){
}

_ = AbstractHashMap$EntrySetIterator.prototype = new Object_0();
_.hasNext = hasNext_1;
_.next = next_2;
_.typeId$ = 0;
_.iter = null;
_.this$0 = null;
function equals_3(other){
  var entry;
  if (other != null && canCast(other.typeId$, 15)) {
    entry = dynamicCast(other, 15);
    if (equalsWithNullCheck(this.getKey(), entry.getKey()) && equalsWithNullCheck(this.getValue(), entry.getValue())) {
      return true;
    }
  }
  return false;
}

function hashCode_4(){
  var keyHash, valueHash;
  keyHash = 0;
  valueHash = 0;
  if (this.getKey() != null) {
    keyHash = hashCode__devirtual$(this.getKey());
  }
  if (this.getValue() != null) {
    valueHash = hashCode__devirtual$(this.getValue());
  }
  return keyHash ^ valueHash;
}

function AbstractMapEntry(){
}

_ = AbstractMapEntry.prototype = new Object_0();
_.equals$ = equals_3;
_.hashCode$ = hashCode_4;
_.typeId$ = 46;
function $AbstractHashMap$MapEntryNull(this$static, this$0){
  this$static.this$0 = this$0;
  return this$static;
}

function getKey(){
  return null;
}

function getValue(){
  return this.this$0.nullSlot;
}

function setValue(object){
  return $putNullSlot(this.this$0, object);
}

function AbstractHashMap$MapEntryNull(){
}

_ = AbstractHashMap$MapEntryNull.prototype = new AbstractMapEntry();
_.getKey = getKey;
_.getValue = getValue;
_.setValue = setValue;
_.typeId$ = 47;
_.this$0 = null;
function $AbstractHashMap$MapEntryString(this$static, key, this$0){
  this$static.this$0 = this$0;
  this$static.key = key;
  return this$static;
}

function getKey_0(){
  return this.key;
}

function getValue_0(){
  return this.this$0.stringMap[':' + this.key];
}

function new_$(this$outer, key){
  return $AbstractHashMap$MapEntryString(new AbstractHashMap$MapEntryString(), key, this$outer);
}

function setValue_0(object){
  return $putStringValue(this.this$0, this.key, object);
}

function AbstractHashMap$MapEntryString(){
}

_ = AbstractHashMap$MapEntryString.prototype = new AbstractMapEntry();
_.getKey = getKey_0;
_.getValue = getValue_0;
_.setValue = setValue_0;
_.typeId$ = 48;
_.key = null;
_.this$0 = null;
function $AbstractList$IteratorImpl(this$static, this$0){
  this$static.this$0 = this$0;
  return this$static;
}

function $hasNext(this$static){
  return this$static.i < this$static.this$0.size_0();
}

function $next_0(this$static){
  if (this$static.i >= this$static.this$0.size_0()) {
    throw new NoSuchElementException();
  }
  return this$static.this$0.get(this$static.i++);
}

function hasNext_2(){
  return this.i < this.this$0.size_0();
}

function next_3(){
  return $next_0(this);
}

function AbstractList$IteratorImpl(){
}

_ = AbstractList$IteratorImpl.prototype = new Object_0();
_.hasNext = hasNext_2;
_.next = next_3;
_.typeId$ = 0;
_.i = 0;
_.this$0 = null;
function $AbstractMap$1(this$static, this$0, val$entrySet){
  this$static.this$0 = this$0;
  this$static.val$entrySet = val$entrySet;
  return this$static;
}

function contains_1(key){
  return $containsKey(this.this$0, key);
}

function iterator_3(){
  var outerIter;
  return outerIter = $AbstractHashMap$EntrySetIterator(new AbstractHashMap$EntrySetIterator(), this.val$entrySet.this$0) , $AbstractMap$1$1(new AbstractMap$1$1(), outerIter);
}

function size_1(){
  return this.val$entrySet.this$0.size;
}

function AbstractMap$1(){
}

_ = AbstractMap$1.prototype = new AbstractSet();
_.contains_0 = contains_1;
_.iterator = iterator_3;
_.size_0 = size_1;
_.typeId$ = 49;
_.this$0 = null;
_.val$entrySet = null;
function $AbstractMap$1$1(this$static, val$outerIter){
  this$static.val$outerIter = val$outerIter;
  return this$static;
}

function hasNext_3(){
  return $hasNext(this.val$outerIter.iter);
}

function next_4(){
  var entry;
  return entry = dynamicCast($next_0(this.val$outerIter.iter), 15) , entry.getKey();
}

function AbstractMap$1$1(){
}

_ = AbstractMap$1$1.prototype = new Object_0();
_.hasNext = hasNext_3;
_.next = next_4;
_.typeId$ = 0;
_.val$outerIter = null;
function $HashMap(this$static){
  this$static.hashCodeMap = [];
  this$static.stringMap = {};
  this$static.nullSlotLive = false;
  this$static.nullSlot = null;
  this$static.size = 0;
  return this$static;
}

function $equals_0(value1, value2){
  return (value1 == null?null:value1) === (value2 == null?null:value2) || value1 != null && equals__devirtual$(value1, value2);
}

function HashMap(){
}

_ = HashMap.prototype = new AbstractHashMap();
_.typeId$ = 50;
function $HashSet(this$static){
  this$static.map = $HashMap(new HashMap());
  return this$static;
}

function $add_4(this$static, o){
  var old;
  old = $put(this$static.map, o, this$static);
  return old == null;
}

function add_5(o){
  var old;
  return old = $put(this.map, o, this) , old == null;
}

function contains_3(o){
  return $containsKey(this.map, o);
}

function iterator_4(){
  var outerIter;
  return outerIter = $AbstractHashMap$EntrySetIterator(new AbstractHashMap$EntrySetIterator(), $keySet(this.map).val$entrySet.this$0) , $AbstractMap$1$1(new AbstractMap$1$1(), outerIter);
}

function size_3(){
  return this.map.size;
}

function HashSet(){
}

_ = HashSet.prototype = new AbstractSet();
_.add_0 = add_5;
_.contains_0 = contains_3;
_.iterator = iterator_4;
_.size_0 = size_3;
_.typeId$ = 51;
_.map = null;
function $MapEntryImpl(this$static, key, value){
  this$static.key = key;
  this$static.value = value;
  return this$static;
}

function getKey_1(){
  return this.key;
}

function getValue_1(){
  return this.value;
}

function setValue_1(value){
  var old;
  old = this.value;
  this.value = value;
  return old;
}

function MapEntryImpl(){
}

_ = MapEntryImpl.prototype = new AbstractMapEntry();
_.getKey = getKey_1;
_.getValue = getValue_1;
_.setValue = setValue_1;
_.typeId$ = 52;
_.key = null;
_.value = null;
function NoSuchElementException(){
}

_ = NoSuchElementException.prototype = new RuntimeException();
_.typeId$ = 53;
function equalsWithNullCheck(a, b){
  return (a == null?null:a) === (b == null?null:b) || a != null && equals__devirtual$(a, b);
}

function init_0(){
  var btnClear, btnCoords, rasterPanel;
  !!$stats && $stats({moduleName:$moduleName, subSystem:'startup', evtGroup:'moduleStartup', millis:(new Date()).getTime(), type:'onModuleLoadStart', className:'com.boscomonkey.gwtraster.client.GwtRaster'});
  rasterPanel = $RasterPanel_0(new RasterPanel(), 150, 30, 4, true);
  $add(get_0('slot1'), rasterPanel);
  btnClear = $Button_0(new Button(), 'Clear');
  $addClickListener(btnClear, $GwtRaster$1(new GwtRaster$1(), rasterPanel));
  $add(get_0('slot2'), btnClear);
  btnCoords = $Button_0(new Button(), 'Coordinates');
  $addClickListener(btnCoords, $GwtRaster$2(new GwtRaster$2(), rasterPanel));
  $add(get_0('slot3'), btnCoords);
}

function gwtOnLoad(errFn, modName, modBase){
  $moduleName = modName;
  $moduleBase = modBase;
  if (errFn)
    try {
      init_0();
    }
     catch (e) {
      errFn(modName);
    }
   else {
    init_0();
  }
}

function nullMethod(){
}

var _3_3Z_classLit = createForArray('', '[[Z'), _3Z_classLit = createForArray('', '[Z'), _3Lcom_google_gwt_user_client_ui_Widget_2_classLit = createForArray('[Lcom.google.gwt.user.client.ui.', 'Widget;'), _3Ljava_lang_Object_2_classLit = createForArray('[Ljava.lang.', 'Object;');
